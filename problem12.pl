##Devin Martin
#Perl Solution
#Project Euler Problem: 12
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#Let us list the factors of the first seven triangle numbers:
#
# 1: 1
#  3: 1,3
#   6: 1,2,3,6
#   10: 1,2,5,10
#   15: 1,3,5,15
#   21: 1,3,7,21
#   28: 1,2,4,7,14,28
#
#   We can see that 28 is the first triangle number to have over five divisors.
#
#   What is the value of the first triangle number to have over five hundred divisors?
#

use strict;
use warnings;

#List of the first x primes (sieves something)
sub primelist{
	my ($max)= @_; 
	my @primes= ();
	my @tested= (1);
	my $j= 1;
	while ($j < $max) {
  		next if $tested[$j++];
   		push @primes, $j;
   		for (my $k= $j; $k <= $max; $k+=$j) {
      		$tested[$k-1]= 1;
   		}
	}
return @primes;
}

#Sub uses recursion to create triangle num, however may be easier to just generate a list as we go, option exists if needed.
sub trianglenum{
	my ($tridex) = @_;
	if ($tridex == 0){ return 0;}
	if ($tridex == 1){ return 1;}
	return $tridex+trianglenum($tridex-1);
}


my $thresh = 20;
my @primes = primelist($thresh);
my $factors = 1;
my $index = 2;
my @trinum = (0,1);
my $trinumtest = 0;

while ($factors < 500){
	push(@trinum, ($trinum[$index-1]+$index));

	my @primecount = (0) x $thresh;
	my $primedex = 0;
	$trinumtest = $trinum[-1];
	foreach (@primes){
		while ($trinumtest % $_ == 0){
			$trinumtest = $trinumtest/$_;
			$primecount[$primedex]++;
		}
		$primedex++;
	}
	$factors = 1;
	foreach (@primecount){
		if ($_ !=0){
			$factors*=($_+1);
		}
	}
	print "$factors factors for trinum $trinum[-1]\n";
	$index++;
}

print "$trinum[-1]\n";
